// Generated by CoffeeScript 1.9.1
(function() {
  var Ball, Mark, Player, Stage, exports, ref;

  exports = (ref = typeof module !== "undefined" && module !== null ? module.exports : void 0) != null ? ref : {};

  if (typeof window !== "undefined" && window !== null) {
    window.stage = exports;
  }

  Ball = ball.Ball;

  Mark = ball.Mark;

  Player = player.Player;

  Stage = (function() {
    var State;

    Stage.prototype.State = State = function(step, key_press, key_release) {
      return {
        step: step,
        key_press: key_press,
        key_release: key_release
      };
    };

    Stage.prototype.ball_bounce = function() {
      return this.sound_bounce.play();
    };

    Stage.prototype.ball_in = function() {
      return this.mark.mark(this.ball);
    };

    Stage.prototype.ball_net = function() {
      return this.sound_net.play();
    };

    Stage.prototype.ball_chip = function() {
      return this.sound_chip.play();
    };

    Stage.prototype.ball_miss = function() {
      if (this.ball.serving()) {
        return this.serve_miss();
      } else {
        return this.miss('MISS');
      }
    };

    Stage.prototype.ball_out = function() {
      this.mark.mark(this.ball);
      if (this.ball.serving()) {
        return this.serve_miss();
      } else {
        return this.miss('OUT');
      }
    };

    Stage.prototype.step_things = function() {
      var tx, tz;
      this.ball.step();
      this.mark.step();
      this.player0.step();
      this.player1.step();
      tx = this.ball.position.x * 0.25;
      tz = this.ball.position.z * 0.25;
      if (this.fixed) {
        this.camera0.position.x = tx;
        this.camera0.position.z = 48.0 + tz;
        this.camera1.position.x = tx;
        return this.camera1.position.z = -48.0 + tz;
      } else {
        this.camera0.position.x = tx + this.player0.root_position().x * 0.5;
        this.camera0.position.z = 48.0 * this.player0.end + tz;
        this.camera1.position.x = tx + this.player1.root_position().x * 0.5;
        return this.camera1.position.z = 48.0 * this.player1.end + tz;
      }
    };

    Stage.prototype.load_sound = function(url, field, next) {
      return this.audio.load(url, (function(_this) {
        return function(source) {
          _this[field] = source;
          return next();
        };
      })(this));
    };

    Stage.prototype.load_sounds = function(sounds, next) {
      var i, len, n, results, sound;
      n = 0;
      results = [];
      for (i = 0, len = sounds.length; i < len; i++) {
        sound = sounds[i];
        results.push(this.load_sound(sound[1], sound[0], function() {
          if (++n >= sounds.length) {
            return next();
          }
        }));
      }
      return results;
    };

    function Stage(audio, dual, fixed) {
      this.audio = audio;
      this.dual = dual;
      this.fixed = fixed;
    }

    Stage.prototype.initialize = function(controller0, player0, controller1, player1, next) {
      return this.load_sounds([['sound_bounce', 'data/bounce.wav'], ['sound_net', 'data/net.wav'], ['sound_chip', 'data/chip.wav'], ['sound_hit', 'data/hit.wav'], ['sound_swing', 'data/swing.wav'], ['sound_ace', 'data/ace.wav'], ['sound_miss', 'data/miss.wav']], (function(_this) {
        return function() {
          var loader;
          loader = new THREE.ColladaLoader;
          loader.options.convertUpAxis = true;
          return loader.load('data/court.dae', function(collada) {
            collada.scene.traverse(function(child) {
              var ref1;
              return (ref1 = child.material) != null ? ref1.alphaTest = 0.5 : void 0;
            });
            _this.scene = new THREE.Scene;
            _this.scene.add(collada.scene);
            _this.camera0 = new THREE.PerspectiveCamera(12.0, 1.0, 10.0, 200.0);
            _this.camera1 = new THREE.PerspectiveCamera(12.0, 1.0, 10.0, 200.0);
            _this.ball = new Ball(_this);
            _this.mark = new Mark;
            _this.player0 = new Player(_this);
            return _this.player0.initialize(player0, function() {
              _this.player1 = new Player(_this);
              return _this.player1.initialize(player1, function() {
                _this.player0.opponent = _this.player1;
                _this.player1.opponent = _this.player0;
                _this.scene.add(_this.ball.node, _this.mark.node, _this.player0.node, _this.player1.node);
                _this.state_ready = State(function() {
                  if (this.duration <= 0.0) {
                    return this.transit_play();
                  }
                  return this.duration -= 1.0;
                }, {
                  13: function() {
                    return this.transit_play();
                  },
                  27: function() {
                    return this.back();
                  }
                }, {});
                _this.state_play = State(function() {
                  this.step_things();
                  if (!this.ball.done) {
                    return;
                  }
                  if (this.duration <= 0.0) {
                    return this.next();
                  }
                  return this.duration -= 1.0;
                }, {
                  13: function() {
                    return this.next();
                  },
                  27: function() {
                    return this.back();
                  }
                }, {});
                controller0.call(_this, _this.state_play, _this.player0);
                controller1.call(_this, _this.state_play, _this.player1);
                return next();
              });
            });
          });
        };
      })(this));
    };

    Stage.prototype.step = function() {
      return this.state.step.call(this);
    };

    Stage.prototype.render = function(renderer, width, height) {
      this.ball.setup();
      this.mark.setup();
      this.player0.setup();
      this.player1.setup();
      renderer.clear();
      if (this.dual) {
        this.camera0.aspect = width * 0.5 / height;
        this.camera0.setViewOffset(width * 0.5, height, 0, 0, width * 0.5, height);
        renderer.setViewport(0, 0, width * 0.5, height);
      } else {
        this.camera0.aspect = width / height;
        this.camera0.setViewOffset(width, height, 0, 0, width, height);
        renderer.setViewport(0, 0, width, height);
      }
      renderer.render(this.scene, this.camera0);
      if (this.dual) {
        this.camera1.aspect = width * 0.5 / height;
        this.camera1.setViewOffset(width * 0.5, height, 0, 0, width * 0.5, height);
        renderer.setViewport(width * 0.5, 0, width * 0.5, height);
        return renderer.render(this.scene, this.camera1);
      }
    };

    Stage.prototype.key_press = function(key) {
      var handler;
      handler = this.state.key_press[key];
      if (handler != null) {
        handler.call(this);
      }
      return handler != null;
    };

    Stage.prototype.key_release = function(key) {
      var handler;
      handler = this.state.key_release[key];
      if (handler != null) {
        handler.call(this);
      }
      return handler != null;
    };

    return Stage;

  })();

  exports.Stage = Stage;

}).call(this);
