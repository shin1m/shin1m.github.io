// Generated by CoffeeScript 1.3.3
(function() {
  var Builder, exports, _ref;

  Builder = (function() {
    var escapes;

    escapes = {
      '&': '&amp;',
      '"': '&quot;',
      '<': '&lt;',
      '>': '&gt;'
    };

    function Builder() {
      this.macros = {};
      this.reset();
    }

    Builder.prototype.reset = function() {
      this.context = [];
      return this.result = [];
    };

    Builder.prototype.e = function(value) {
      return this.result.push(value.replace(/[&"<>]/g, function(c) {
        return escapes[c];
      }));
    };

    Builder.prototype.u = function(value) {
      return this.result.push(value);
    };

    Builder.prototype.bold = {
      start: function() {
        return this.u('<strong>');
      },
      end: function() {
        return this.u('</strong>');
      }
    };

    Builder.prototype.italics = {
      start: function() {
        return this.u('<em>');
      },
      end: function() {
        return this.u('</em>');
      }
    };

    Builder.prototype.heading1 = {
      start: function() {
        return this.u('<h1>');
      },
      end: function() {
        return this.u('</h1>');
      }
    };

    Builder.prototype.heading2 = {
      start: function() {
        return this.u('<h2>');
      },
      end: function() {
        return this.u('</h2>');
      }
    };

    Builder.prototype.heading3 = {
      start: function() {
        return this.u('<h3>');
      },
      end: function() {
        return this.u('</h3>');
      }
    };

    Builder.prototype.heading4 = {
      start: function() {
        return this.u('<h4>');
      },
      end: function() {
        return this.u('</h4>');
      }
    };

    Builder.prototype.heading5 = {
      start: function() {
        return this.u('<h5>');
      },
      end: function() {
        return this.u('</h5>');
      }
    };

    Builder.prototype.heading6 = {
      start: function() {
        return this.u('<h6>');
      },
      end: function() {
        return this.u('</h6>');
      }
    };

    Builder.prototype.link = {
      start: function(options) {
        this.u('<a href="');
        this.e(options.link);
        return this.u('">');
      },
      end: function() {
        return this.u('</a>');
      }
    };

    Builder.prototype.url = {
      start: function(options) {
        this.u('<a href="');
        this.e(options.link);
        this.u('">');
        return this.e(options.link);
      },
      end: function() {
        return this.u('</a>');
      }
    };

    Builder.prototype.paragraph = {
      start: function() {
        return this.u('<p>');
      },
      end: function() {
        return this.u('</p>');
      }
    };

    Builder.prototype.lineBreak = {
      start: function() {
        return this.u('<br />');
      },
      end: function() {}
    };

    Builder.prototype.unorderedList = {
      start: function() {
        return this.u('<ul>');
      },
      end: function() {
        return this.u('</ul>');
      }
    };

    Builder.prototype.orderedList = {
      start: function() {
        return this.u('<ol>');
      },
      end: function() {
        return this.u('</ol>');
      }
    };

    Builder.prototype.listItem = {
      start: function() {
        return this.u('<li>');
      },
      end: function() {
        return this.u('</li>');
      }
    };

    Builder.prototype.horizontalRule = {
      start: function() {
        return this.u('<hr />');
      },
      end: function() {}
    };

    Builder.prototype.image = {
      start: function(options) {
        this.u('<img src="');
        this.e(options.link);
        if (options.title != null) {
          this.u('" title="');
          this.e(options.title);
        }
        return this.u('" />');
      },
      end: function() {}
    };

    Builder.prototype.table = {
      start: function() {
        return this.u('<table>');
      },
      end: function() {
        return this.u('</table>');
      }
    };

    Builder.prototype.tableRow = {
      start: function() {
        return this.u('<tr>');
      },
      end: function() {
        return this.u('</tr>');
      }
    };

    Builder.prototype.tableHeading = {
      start: function() {
        return this.u('<th>');
      },
      end: function() {
        return this.u('</th>');
      }
    };

    Builder.prototype.tableCell = {
      start: function() {
        return this.u('<td>');
      },
      end: function() {
        return this.u('</td>');
      }
    };

    Builder.prototype.nowiki = {
      start: function() {
        return this.u('<pre>');
      },
      end: function() {
        return this.u('</pre>');
      }
    };

    Builder.prototype.inlineNowiki = {
      start: function() {
        return this.u('<tt>');
      },
      end: function() {
        return this.u('</tt>');
      }
    };

    Builder.prototype.macro = {
      start: function(options) {
        var macro;
        macro = this.macros[options.name];
        if (macro != null) {
          return macro(this, options.parameters);
        } else {
          return this.e('Unknown macro: ' + options.name);
        }
      },
      end: function() {}
    };

    Builder.prototype.start = function(name, options) {
      var handler;
      handler = this[name];
      if (handler != null) {
        this.context.push(handler);
        return handler.start.call(this, options);
      } else {
        return this.context.push(null);
      }
    };

    Builder.prototype.end = function() {
      var _ref;
      return (_ref = this.context.pop()) != null ? _ref.end.call(this) : void 0;
    };

    Builder.prototype.text = function(value) {
      return this.e(value);
    };

    return Builder;

  })();

  exports = (_ref = typeof module !== "undefined" && module !== null ? module.exports : void 0) != null ? _ref : {};

  if (typeof window !== "undefined" && window !== null) {
    window.html = exports;
  }

  exports.Builder = Builder;

}).call(this);
