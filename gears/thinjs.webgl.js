import { dotnet } from './dotnet.js';
export function webgl(set) {
    const module = dotnet.instance.Module;
    const asArray = (type, bytes) => new type(module.HEAPU8.buffer, bytes._pointer, bytes._length / type.BYTES_PER_ELEMENT);
    set('thisjs.webgl', {
        create: (canvas, name) => canvas.getContext(name),
        width: gl => gl.canvas.clientWidth,
        height: gl => gl.canvas.clientHeight,
        activeTexture: (gl, texture) => gl.activeTexture(texture),
        attachShader: (gl, program, shader) => gl.attachShader(program, shader),
        bindAttribLocation: (gl, program, index, name) => gl.bindAttribLocation(program, index, name),
        bindBuffer: (gl, target, buffer) => gl.bindBuffer(target, buffer),
        bindFramebuffer: (gl, target, framebuffer) => gl.bindFramebuffer(target, framebuffer),
        bindRenderbuffer: (gl, target, renderbuffer) => gl.bindRenderbuffer(target, renderbuffer),
        bindTexture: (gl, target, texture) => gl.bindTexture(target, texture),
        blendColor: (gl, red, green, blue, alpha) => gl.blendColor(red, green, blue, alpha),
        blendEquation: (gl, mode) => gl.blendEquation(mode),
        blendEquationSeparate: (gl, modeRGB, modeAlpha) => gl.blendEquationSeparate(modeRGB, modeAlpha),
        blendFunc: (gl, sfactor, dfactor) => gl.blendFunc(sfactor, dfactor),
        blendFuncSeparate: (gl, srcRGB, dstRGB, srcAlpha, dstAlpha) => gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha),
        checkFramebufferStatus: (gl, target) => gl.checkFramebufferStatus(target),
        clear: (gl, mask) => gl.clear(mask),
        clearColor: (gl, red, green, blue, alpha) => gl.clearColor(red, green, blue, alpha),
        clearDepth: (gl, depth) => gl.clearDepth(depth),
        clearStencil: (gl, s) => gl.clearStencil(s),
        colorMask: (gl, red, green, blue, alpha) => gl.colorMask(red, green, blue, alpha),
        compileShader: (gl, shader) => gl.compileShader(shader),
        copyTexImage2D: (gl, target, level, internalformat, x, y, width, height, border) => gl.copyTexImage2D(target, level, internalformat, x, y, width, height, border),
        copyTexSubImage2D: (gl, target, level, xoffset, yoffset, x, y, width, height) => gl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height),
        createBuffer: (gl) => gl.createBuffer(),
        createFramebuffer: (gl) => gl.createFramebuffer(),
        createProgram: (gl) => gl.createProgram(),
        createRenderbuffer: (gl) => gl.createRenderbuffer(),
        createShader: (gl, type) => gl.createShader(type),
        createTexture: (gl) => gl.createTexture(),
        cullFace: (gl, mode) => gl.cullFace(mode),
        deleteBuffer: (gl, buffer) => gl.deleteBuffer(buffer),
        deleteFramebuffer: (gl, framebuffer) => gl.deleteFramebuffer(framebuffer),
        deleteProgram: (gl, program) => gl.deleteProgram(program),
        deleteRenderbuffer: (gl, renderbuffer) => gl.deleteRenderbuffer(renderbuffer),
        deleteShader: (gl, shader) => gl.deleteShader(shader),
        deleteTexture: (gl, texture) => gl.deleteTexture(texture),
        depthFunc: (gl, func) => gl.depthFunc(func),
        depthMask: (gl, flag) => gl.depthMask(flag),
        depthRange: (gl, zNear, zFar) => gl.depthRange(zNear, zFar),
        detachShader: (gl, program, shader) => gl.detachShader(program, shader),
        disable: (gl, cap) => gl.disable(cap),
        disableVertexAttribArray: (gl, index) => gl.disableVertexAttribArray(index),
        drawArrays: (gl, mode, first, count) => gl.drawArrays(mode, first, count),
        drawElements: (gl, mode, count, type, offset) => gl.drawElements(mode, count, type, offset),
        enable: (gl, cap) => gl.enable(cap),
        enableVertexAttribArray: (gl, index) => gl.enableVertexAttribArray(index),
        finish: (gl) => gl.finish(),
        flush: (gl) => gl.flush(),
        framebufferRenderbuffer: (gl, target, attachment, renderbuffertarget, renderbuffer) => gl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer),
        framebufferTexture2D: (gl, target, attachment, textarget, texture, level) => gl.framebufferTexture2D(target, attachment, textarget, texture, level),
        frontFace: (gl, mode) => gl.frontFace(mode),
        generateMipmap: (gl, target) => gl.generateMipmap(target),
        getActiveAttrib: (gl, program, index) => gl.getActiveAttrib(program, index),
        getActiveUniform: (gl, program, index) => gl.getActiveUniform(program, index),
        getAttachedShaders: (gl, program) => gl.getAttachedShaders(program),
        getAttribLocation: (gl, program, name) => gl.getAttribLocation(program, name),
        getBufferParameter: (gl, target, pname) => gl.getBufferParameter(target, pname),
        getParameter: (gl, pname) => gl.getParameter(pname),
        getError: (gl) => gl.getError(),
        getFramebufferAttachmentParameter: (gl, target, attachment, pname) => gl.getFramebufferAttachmentParameter(target, attachment, pname),
        getProgramParameter: (gl, program, pname) => gl.getProgramParameter(program, pname),
        getProgramInfoLog: (gl, program) => gl.getProgramInfoLog(program),
        getRenderbufferParameter: (gl, target, pname) => gl.getRenderbufferParameter(target, pname),
        getShaderParameter: (gl, shader, pname) => gl.getShaderParameter(shader, pname),
        getShaderPrecisionFormat: (gl, shadertype, precisiontype) => gl.getShaderPrecisionFormat(shadertype, precisiontype),
        getShaderInfoLog: (gl, shader) => gl.getShaderInfoLog(shader),
        getShaderSource: (gl, shader) => gl.getShaderSource(shader),
        getTexParameter: (gl, target, pname) => gl.getTexParameter(target, pname),
        getUniform: (gl, program, location) => gl.getUniform(program, location),
        getUniformLocation: (gl, program, name) => gl.getUniformLocation(program, name),
        getVertexAttrib: (gl, index, pname) => gl.getVertexAttrib(index, pname),
        getVertexAttribOffset: (gl, index, pname) => gl.getVertexAttribOffset(index, pname),
        hint: (gl, target, mode) => gl.hint(target, mode),
        isBuffer: (gl, buffer) => gl.isBuffer(buffer),
        isEnabled: (gl, cap) => gl.isEnabled(cap),
        isFramebuffer: (gl, framebuffer) => gl.isFramebuffer(framebuffer),
        isProgram: (gl, program) => gl.isProgram(program),
        isRenderbuffer: (gl, renderbuffer) => gl.isRenderbuffer(renderbuffer),
        isShader: (gl, shader) => gl.isShader(shader),
        isTexture: (gl, texture) => gl.isTexture(texture),
        lineWidth: (gl, width) => gl.lineWidth(width),
        linkProgram: (gl, program) => gl.linkProgram(program),
        pixelStorei: (gl, pname, param) => gl.pixelStorei(pname, param),
        polygonOffset: (gl, factor, units) => gl.polygonOffset(factor, units),
        renderbufferStorage: (gl, target, internalformat, width, height) => gl.renderbufferStorage(target, internalformat, width, height),
        sampleCoverage: (gl, value, invert) => gl.sampleCoverage(value, invert),
        scissor: (gl, x, y, width, height) => gl.scissor(x, y, width, height),
        shaderSource: (gl, shader, source) => gl.shaderSource(shader, source),
        stencilFunc: (gl, func, mask) => gl.stencilFunc(func, mask),
        stencilFuncSeparate: (gl, face, func, mask) => gl.stencilFuncSeparate(face, func, mask),
        stencilMask: (gl, mask) => gl.stencilMask(mask),
        stencilMaskSeparate: (gl, face, mask) => gl.stencilMaskSeparate(face, mask),
        stencilOp: (gl, fail, zfail, zpass) => gl.stencilOp(fail, zfail, zpass),
        stencilOpSeparate: (gl, face, fail, zfail, zpass) => gl.stencilOpSeparate(face, fail, zfail, zpass),
        texParameterf: (gl, target, pname, param) => gl.texParameterf(target, pname, param),
        texParameteri: (gl, target, pname, param) => gl.texParameteri(target, pname, param),
        uniform1f: (gl, location, x) => gl.uniform1f(location, x),
        uniform2f: (gl, location, x, y) => gl.uniform2f(location, x, y),
        uniform3f: (gl, location, x, y, z) => gl.uniform3f(location, x, y, z),
        uniform4f: (gl, location, x, y, z, w) => gl.uniform4f(location, x, y, z, w),
        uniform1i: (gl, location, x) => gl.uniform1i(location, x),
        uniform2i: (gl, location, x, y) => gl.uniform2i(location, x, y),
        uniform3i: (gl, location, x, y, z) => gl.uniform3i(location, x, y, z),
        uniform4i: (gl, location, x, y, z, w) => gl.uniform4i(location, x, y, z, w),
        useProgram: (gl, program) => gl.useProgram(program),
        validateProgram: (gl, program) => gl.validateProgram(program),
        vertexAttrib1f: (gl, index, x) => gl.vertexAttrib1f(index, x),
        vertexAttrib2f: (gl, index, x, y) => gl.vertexAttrib2f(index, x, y),
        vertexAttrib3f: (gl, index, x, y, z) => gl.vertexAttrib3f(index, x, y, z),
        vertexAttrib4f: (gl, index, x, y, z, w) => gl.vertexAttrib4f(index, x, y, z, w),
        vertexAttrib1fv: (gl, index, values) => gl.vertexAttrib1fv(index, asArray(Float32Array, values)),
        vertexAttrib2fv: (gl, index, values) => gl.vertexAttrib2fv(index, asArray(Float32Array, values)),
        vertexAttrib3fv: (gl, index, values) => gl.vertexAttrib3fv(index, asArray(Float32Array, values)),
        vertexAttrib4fv: (gl, index, values) => gl.vertexAttrib4fv(index, asArray(Float32Array, values)),
        vertexAttribPointer: (gl, index, size, type, normalized, stride, offset) => gl.vertexAttribPointer(index, size, type, normalized, stride, offset),
        viewport: (gl, x, y, width, height) => gl.viewport(x, y, width, height),
        bufferData: (gl, target, size, usage) => gl.bufferData(target, size, usage),
        bufferData__0: (gl, target, data, usage) => gl.bufferData(target, asArray(Uint8Array, data), usage),
        bufferSubData: (gl, target, offset, data) => gl.bufferSubData(target, offset, asArray(Uint8Array, data)),
        compressedTexImage2D: (gl, target, level, internalformat, width, height, border, data) => gl.compressedTexImage2D(target, level, internalformat, width, height, border, asArray(Uint8Array, data)),
        compressedTexSubImage2D: (gl, target, level, xoffset, yoffset, width, height, format, data) => gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, asArray(Uint8Array, data)),
        readPixels: (gl, x, y, width, height, format, type, pixels) => gl.readPixels(x, y, width, height, format, type, pixels),
        texImage2D: (gl, target, level, internalformat, width, height, border, format, type) => gl.texImage2D(target, level, internalformat, width, height, border, format, type),
        texImage2D__0: (gl, target, level, internalformat, width, height, border, format, type, pixels) => gl.texImage2D(target, level, internalformat, width, height, border, format, type, asArray(Uint8Array, pixels)),
        texImage2D__1: (gl, target, level, internalformat, format, type, source) => gl.texImage2D(target, level, internalformat, format, type, source),
        texSubImage2D: (gl, target, level, xoffset, yoffset, width, height, format, type) => gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type),
        texSubImage2D__0: (gl, target, level, xoffset, yoffset, width, height, format, type, pixels) => gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, asArray(Uint8Array, pixels)),
        texSubImage2D__1: (gl, target, level, xoffset, yoffset, format, type, source) => gl.texSubImage2D(target, level, xoffset, yoffset, format, type, source),
        uniform1fv: (gl, location, v) => gl.uniform1fv(location, asArray(Float32Array, v)),
        uniform2fv: (gl, location, v) => gl.uniform2fv(location, asArray(Float32Array, v)),
        uniform3fv: (gl, location, v) => gl.uniform3fv(location, asArray(Float32Array, v)),
        uniform4fv: (gl, location, v) => gl.uniform4fv(location, asArray(Float32Array, v)),
        uniform1iv: (gl, location, v) => gl.uniform1iv(location, asArray(Int32Array, v)),
        uniform2iv: (gl, location, v) => gl.uniform2iv(location, asArray(Int32Array, v)),
        uniform3iv: (gl, location, v) => gl.uniform3iv(location, asArray(Int32Array, v)),
        uniform4iv: (gl, location, v) => gl.uniform4iv(location, asArray(Int32Array, v)),
        uniformMatrix2fv: (gl, location, transpose, value) => gl.uniformMatrix2fv(location, transpose, asArray(Float32Array, value)),
        uniformMatrix3fv: (gl, location, transpose, value) => gl.uniformMatrix3fv(location, transpose, asArray(Float32Array, value)),
        uniformMatrix4fv: (gl, location, transpose, value) => gl.uniformMatrix4fv(location, transpose, asArray(Float32Array, value)),
        copyBufferSubData: (gl, readTarget, writeTarget, readOffset, writeOffset, size) => gl.copyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size),
        getBufferSubData: (gl, target, srcByteOffset, dstBuffer) => gl.getBufferSubData(target, srcByteOffset, asArray(Uint8Array, dstBuffer)),
        getBufferSubData__0: (gl, target, srcByteOffset, dstBuffer, dstOffset) => gl.getBufferSubData(target, srcByteOffset, asArray(Uint8Array, dstBuffer), dstOffset),
        getBufferSubData__1: (gl, target, srcByteOffset, dstBuffer, dstOffset, length) => gl.getBufferSubData(target, srcByteOffset, asArray(Uint8Array, dstBuffer), dstOffset, length),
        blitFramebuffer: (gl, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) => gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter),
        framebufferTextureLayer: (gl, target, attachment, texture, level, layer) => gl.framebufferTextureLayer(target, attachment, texture, level, layer),
        invalidateFramebuffer: (gl, target, attachments) => gl.invalidateFramebuffer(target, asArray(Int32Array, attachments)),
        invalidateSubFramebuffer: (gl, target, attachments, x, y, width, height) => gl.invalidateSubFramebuffer(target, asArray(Int32Array, attachments), x, y, width, height),
        readBuffer: (gl, src) => gl.readBuffer(src),
        getInternalformatParameter: (gl, target, internalformat, pname) => gl.getInternalformatParameter(target, internalformat, pname),
        renderbufferStorageMultisample: (gl, target, samples, internalformat, width, height) => gl.renderbufferStorageMultisample(target, samples, internalformat, width, height),
        texStorage2D: (gl, target, levels, internalformat, width, height) => gl.texStorage2D(target, levels, internalformat, width, height),
        texStorage3D: (gl, target, levels, internalformat, width, height, depth) => gl.texStorage3D(target, levels, internalformat, width, height, depth),
        texImage3D: (gl, target, level, internalformat, width, height, depth, border, format, type, pboOffset) => gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, pboOffset),
        texImage3D__0: (gl, target, level, internalformat, width, height, depth, border, format, type, source) => gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, source),
        texImage3D__1: (gl, target, level, internalformat, width, height, depth, border, format, type) => gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type),
        texImage3D__2: (gl, target, level, internalformat, width, height, depth, border, format, type, srcData) => gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, asArray(Uint8Array, srcData)),
        texImage3D__3: (gl, target, level, internalformat, width, height, depth, border, format, type, srcData, srcOffset) => gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, asArray(Uint8Array, srcData), srcOffset),
        texSubImage3D: (gl, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pboOffset) => gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pboOffset),
        texSubImage3D__0: (gl, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, source) => gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, source),
        texSubImage3D__1: (gl, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type) => gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type),
        texSubImage3D__2: (gl, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, srcData) => gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, asArray(Uint8Array, srcData)),
        texSubImage3D__3: (gl, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, srcData, srcOffset) => gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, asArray(Uint8Array, srcData), srcOffset),
        copyTexSubImage3D: (gl, target, level, xoffset, yoffset, zoffset, x, y, width, height) => gl.copyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height),
        compressedTexImage3D: (gl, target, level, internalformat, width, height, depth, border, imageSize, offset) => gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, offset),
        compressedTexImage3D__0: (gl, target, level, internalformat, width, height, depth, border, srcData) => gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, asArray(Uint8Array, srcData)),
        compressedTexImage3D__1: (gl, target, level, internalformat, width, height, depth, border, srcData, srcOffset) => gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, asArray(Uint8Array, srcData), srcOffset),
        compressedTexImage3D__2: (gl, target, level, internalformat, width, height, depth, border, srcData, srcOffset, srcLengthOverride) => gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, asArray(Uint8Array, srcData), srcOffset, srcLengthOverride),
        compressedTexSubImage3D: (gl, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, offset) => gl.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, offset),
        compressedTexSubImage3D__0: (gl, target, level, xoffset, yoffset, zoffset, width, height, depth, format, srcData) => gl.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, asArray(Uint8Array, srcData)),
        compressedTexSubImage3D__1: (gl, target, level, xoffset, yoffset, zoffset, width, height, depth, format, srcData, srcOffset) => gl.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, asArray(Uint8Array, srcData), srcOffset),
        compressedTexSubImage3D__2: (gl, target, level, xoffset, yoffset, zoffset, width, height, depth, format, srcData, srcOffset, srcLengthOverride) => gl.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, asArray(Uint8Array, srcData), srcOffset, srcLengthOverride),
        getFragDataLocation: (gl, program, name) => gl.getFragDataLocation(program, name),
        uniform1ui: (gl, location, v0) => gl.uniform1ui(location, v0),
        uniform2ui: (gl, location, v0, v1) => gl.uniform2ui(location, v0, v1),
        uniform3ui: (gl, location, v0, v1, v2) => gl.uniform3ui(location, v0, v1, v2),
        uniform4ui: (gl, location, v0, v1, v2, v3) => gl.uniform4ui(location, v0, v1, v2, v3),
        uniform1uiv: (gl, location, data) => gl.uniform1uiv(location, asArray(Uint32Array, data)),
        uniform1uiv__0: (gl, location, data, srcOffset) => gl.uniform1uiv(location, asArray(Uint32Array, data), srcOffset),
        uniform1uiv__1: (gl, location, data, srcOffset, srcLength) => gl.uniform1uiv(location, asArray(Uint32Array, data), srcOffset, srcLength),
        uniform2uiv: (gl, location, data) => gl.uniform2uiv(location, asArray(Uint32Array, data)),
        uniform2uiv__0: (gl, location, data, srcOffset) => gl.uniform2uiv(location, asArray(Uint32Array, data), srcOffset),
        uniform2uiv__1: (gl, location, data, srcOffset, srcLength) => gl.uniform2uiv(location, asArray(Uint32Array, data), srcOffset, srcLength),
        uniform3uiv: (gl, location, data) => gl.uniform3uiv(location, asArray(Uint32Array, data)),
        uniform3uiv__0: (gl, location, data, srcOffset) => gl.uniform3uiv(location, asArray(Uint32Array, data), srcOffset),
        uniform3uiv__1: (gl, location, data, srcOffset, srcLength) => gl.uniform3uiv(location, asArray(Uint32Array, data), srcOffset, srcLength),
        uniform4uiv: (gl, location, data) => gl.uniform4uiv(location, asArray(Uint32Array, data)),
        uniform4uiv__0: (gl, location, data, srcOffset) => gl.uniform4uiv(location, asArray(Uint32Array, data), srcOffset),
        uniform4uiv__1: (gl, location, data, srcOffset, srcLength) => gl.uniform4uiv(location, asArray(Uint32Array, data), srcOffset, srcLength),
        uniformMatrix3x2fv: (gl, location, transpose, data) => gl.uniformMatrix3x2fv(location, transpose, asArray(Float32Array, data)),
        uniformMatrix3x2fv__0: (gl, location, transpose, data, srcOffset) => gl.uniformMatrix3x2fv(location, transpose, asArray(Float32Array, data), srcOffset),
        uniformMatrix3x2fv__1: (gl, location, transpose, data, srcOffset, srcLength) => gl.uniformMatrix3x2fv(location, transpose, asArray(Float32Array, data), srcOffset, srcLength),
        uniformMatrix4x2fv: (gl, location, transpose, data) => gl.uniformMatrix4x2fv(location, transpose, asArray(Float32Array, data)),
        uniformMatrix4x2fv__0: (gl, location, transpose, data, srcOffset) => gl.uniformMatrix4x2fv(location, transpose, asArray(Float32Array, data), srcOffset),
        uniformMatrix4x2fv__1: (gl, location, transpose, data, srcOffset, srcLength) => gl.uniformMatrix4x2fv(location, transpose, asArray(Float32Array, data), srcOffset, srcLength),
        uniformMatrix2x3fv: (gl, location, transpose, data) => gl.uniformMatrix2x3fv(location, transpose, asArray(Float32Array, data)),
        uniformMatrix2x3fv__0: (gl, location, transpose, data, srcOffset) => gl.uniformMatrix2x3fv(location, transpose, asArray(Float32Array, data), srcOffset),
        uniformMatrix2x3fv__1: (gl, location, transpose, data, srcOffset, srcLength) => gl.uniformMatrix2x3fv(location, transpose, asArray(Float32Array, data), srcOffset, srcLength),
        uniformMatrix4x3fv: (gl, location, transpose, data) => gl.uniformMatrix4x3fv(location, transpose, asArray(Float32Array, data)),
        uniformMatrix4x3fv__0: (gl, location, transpose, data, srcOffset) => gl.uniformMatrix4x3fv(location, transpose, asArray(Float32Array, data), srcOffset),
        uniformMatrix4x3fv__1: (gl, location, transpose, data, srcOffset, srcLength) => gl.uniformMatrix4x3fv(location, transpose, asArray(Float32Array, data), srcOffset, srcLength),
        uniformMatrix2x4fv: (gl, location, transpose, data) => gl.uniformMatrix2x4fv(location, transpose, asArray(Float32Array, data)),
        uniformMatrix2x4fv__0: (gl, location, transpose, data, srcOffset) => gl.uniformMatrix2x4fv(location, transpose, asArray(Float32Array, data), srcOffset),
        uniformMatrix2x4fv__1: (gl, location, transpose, data, srcOffset, srcLength) => gl.uniformMatrix2x4fv(location, transpose, asArray(Float32Array, data), srcOffset, srcLength),
        uniformMatrix3x4fv: (gl, location, transpose, data) => gl.uniformMatrix3x4fv(location, transpose, asArray(Float32Array, data)),
        uniformMatrix3x4fv__0: (gl, location, transpose, data, srcOffset) => gl.uniformMatrix3x4fv(location, transpose, asArray(Float32Array, data), srcOffset),
        uniformMatrix3x4fv__1: (gl, location, transpose, data, srcOffset, srcLength) => gl.uniformMatrix3x4fv(location, transpose, asArray(Float32Array, data), srcOffset, srcLength),
        vertexAttribI4i: (gl, index, x, y, z, w) => gl.vertexAttribI4i(index, x, y, z, w),
        vertexAttribI4iv: (gl, index, values) => gl.vertexAttribI4iv(index, asArray(Int32Array, values)),
        vertexAttribI4ui: (gl, index, x, y, z, w) => gl.vertexAttribI4ui(index, x, y, z, w),
        vertexAttribI4uiv: (gl, index, values) => gl.vertexAttribI4uiv(index, asArray(Uint32Array, values)),
        vertexAttribIPointer: (gl, index, size, type, stride, offset) => gl.vertexAttribIPointer(index, size, type, stride, offset),
        vertexAttribDivisor: (gl, index, divisor) => gl.vertexAttribDivisor(index, divisor),
        drawArraysInstanced: (gl, mode, first, count, instanceCount) => gl.drawArraysInstanced(mode, first, count, instanceCount),
        drawElementsInstanced: (gl, mode, count, type, offset, instanceCount) => gl.drawElementsInstanced(mode, count, type, offset, instanceCount),
        drawRangeElements: (gl, mode, start, end, count, type, offset) => gl.drawRangeElements(mode, start, end, count, type, offset),
        drawBuffers: (gl, buffers) => gl.drawBuffers(asArray(Int32Array, buffers)),
        clearBufferfv: (gl, buffer, drawbuffer, values) => gl.clearBufferfv(buffer, drawbuffer, asArray(Float32Array, values)),
        clearBufferfv__0: (gl, buffer, drawbuffer, values, srcOffset) => gl.clearBufferfv(buffer, drawbuffer, asArray(Float32Array, values), srcOffset),
        clearBufferiv: (gl, buffer, drawbuffer, values) => gl.clearBufferiv(buffer, drawbuffer, asArray(Int32Array, values)),
        clearBufferiv__0: (gl, buffer, drawbuffer, values, srcOffset) => gl.clearBufferiv(buffer, drawbuffer, asArray(Int32Array, values), srcOffset),
        clearBufferuiv: (gl, buffer, drawbuffer, values) => gl.clearBufferuiv(buffer, drawbuffer, asArray(Uint32Array, values)),
        clearBufferuiv__0: (gl, buffer, drawbuffer, values, srcOffset) => gl.clearBufferuiv(buffer, drawbuffer, asArray(Uint32Array, values), srcOffset),
        clearBufferfi: (gl, buffer, drawbuffer, depth, stencil) => gl.clearBufferfi(buffer, drawbuffer, depth, stencil),
        createQuery: (gl) => gl.createQuery(),
        deleteQuery: (gl, query) => gl.deleteQuery(query),
        isQuery: (gl, query) => gl.isQuery(query),
        beginQuery: (gl, target, query) => gl.beginQuery(target, query),
        endQuery: (gl, target) => gl.endQuery(target),
        getQuery: (gl, target, pname) => gl.getQuery(target, pname),
        getQueryParameter: (gl, query, pname) => gl.getQueryParameter(query, pname),
        createSampler: (gl) => gl.createSampler(),
        deleteSampler: (gl, sampler) => gl.deleteSampler(sampler),
        isSampler: (gl, sampler) => gl.isSampler(sampler),
        bindSampler: (gl, unit, sampler) => gl.bindSampler(unit, sampler),
        samplerParameteri: (gl, sampler, pname, param) => gl.samplerParameteri(sampler, pname, param),
        samplerParameterf: (gl, sampler, pname, param) => gl.samplerParameterf(sampler, pname, param),
        getSamplerParameter: (gl, sampler, pname) => gl.getSamplerParameter(sampler, pname),
        fenceSync: (gl, condition, flags) => gl.fenceSync(condition, flags),
        isSync: (gl, sync) => gl.isSync(sync),
        deleteSync: (gl, sync) => gl.deleteSync(sync),
        clientWaitSync: (gl, sync, flags, timeout) => gl.clientWaitSync(sync, flags, timeout),
        waitSync: (gl, sync, flags, timeout) => gl.waitSync(sync, flags, timeout),
        getSyncParameter: (gl, sync, pname) => gl.getSyncParameter(sync, pname),
        createTransformFeedback: (gl) => gl.createTransformFeedback(),
        deleteTransformFeedback: (gl, tf) => gl.deleteTransformFeedback(tf),
        isTransformFeedback: (gl, tf) => gl.isTransformFeedback(tf),
        bindTransformFeedback: (gl, target, tf) => gl.bindTransformFeedback(target, tf),
        beginTransformFeedback: (gl, primitiveMode) => gl.beginTransformFeedback(primitiveMode),
        endTransformFeedback: (gl) => gl.endTransformFeedback(),
        transformFeedbackVaryings: (gl, program, varyings, bufferMode) => gl.transformFeedbackVaryings(program, varyings, bufferMode),
        getTransformFeedbackVarying: (gl, program, index) => gl.getTransformFeedbackVarying(program, index),
        pauseTransformFeedback: (gl) => gl.pauseTransformFeedback(),
        resumeTransformFeedback: (gl) => gl.resumeTransformFeedback(),
        bindBufferBase: (gl, target, index, buffer) => gl.bindBufferBase(target, index, buffer),
        bindBufferRange: (gl, target, index, buffer, offset, size) => gl.bindBufferRange(target, index, buffer, offset, size),
        getIndexedParameter: (gl, target, index) => gl.getIndexedParameter(target, index),
        getUniformIndices: (gl, program, uniformNames) => gl.getUniformIndices(program, uniformNames),
        getActiveUniforms: (gl, program, uniformIndices, pname) => gl.getActiveUniforms(program, asArray(Int32Array, uniformIndices), pname),
        getUniformBlockIndex: (gl, program, uniformBlockName) => gl.getUniformBlockIndex(program, uniformBlockName),
        getActiveUniformBlockParameter: (gl, program, uniformBlockIndex, pname) => gl.getActiveUniformBlockParameter(program, uniformBlockIndex, pname),
        getActiveUniformBlockName: (gl, program, uniformBlockIndex) => gl.getActiveUniformBlockName(program, uniformBlockIndex),
        uniformBlockBinding: (gl, program, uniformBlockIndex, uniformBlockBinding) => gl.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding),
        createVertexArray: (gl) => gl.createVertexArray(),
        deleteVertexArray: (gl, vertexArray) => gl.deleteVertexArray(vertexArray),
        isVertexArray: (gl, vertexArray) => gl.isVertexArray(vertexArray),
        bindVertexArray: (gl, array) => gl.bindVertexArray(array),
        bufferData__1: (gl, target, srcData, usage, srcOffset) => gl.bufferData(target, asArray(Uint8Array, srcData), usage, srcOffset),
        bufferData__2: (gl, target, srcData, usage, srcOffset, length) => gl.bufferData(target, asArray(Uint8Array, srcData), usage, srcOffset, length),
        bufferSubData__0: (gl, target, dstByteOffset, srcData, srcOffset) => gl.bufferSubData(target, dstByteOffset, asArray(Uint8Array, srcData), srcOffset),
        bufferSubData__1: (gl, target, dstByteOffset, srcData, srcOffset, length) => gl.bufferSubData(target, dstByteOffset, asArray(Uint8Array, srcData), srcOffset, length),
        texImage2D__2: (gl, target, level, internalformat, width, height, border, format, type, pboOffset) => gl.texImage2D(target, level, internalformat, width, height, border, format, type, pboOffset),
        texImage2D__3: (gl, target, level, internalformat, width, height, border, format, type, source) => gl.texImage2D(target, level, internalformat, width, height, border, format, type, source),
        texImage2D__4: (gl, target, level, internalformat, width, height, border, format, type, srcData, srcOffset) => gl.texImage2D(target, level, internalformat, width, height, border, format, type, asArray(Uint8Array, srcData), srcOffset),
        texSubImage2D__2: (gl, target, level, xoffset, yoffset, width, height, format, type, pboOffset) => gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pboOffset),
        texSubImage2D__3: (gl, target, level, xoffset, yoffset, width, height, format, type, source) => gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, source),
        texSubImage2D__4: (gl, target, level, xoffset, yoffset, width, height, format, type, srcData, srcOffset) => gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, asArray(Uint8Array, srcData), srcOffset),
        compressedTexImage2D__0: (gl, target, level, internalformat, width, height, border, imageSize, offset) => gl.compressedTexImage2D(target, level, internalformat, width, height, border, imageSize, offset),
        compressedTexImage2D__1: (gl, target, level, internalformat, width, height, border, srcData, srcOffset) => gl.compressedTexImage2D(target, level, internalformat, width, height, border, asArray(Uint8Array, srcData), srcOffset),
        compressedTexImage2D__2: (gl, target, level, internalformat, width, height, border, srcData, srcOffset, srcLengthOverride) => gl.compressedTexImage2D(target, level, internalformat, width, height, border, asArray(Uint8Array, srcData), srcOffset, srcLengthOverride),
        compressedTexSubImage2D__0: (gl, target, level, xoffset, yoffset, width, height, format, imageSize, offset) => gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, offset),
        compressedTexSubImage2D__1: (gl, target, level, xoffset, yoffset, width, height, format, srcData, srcOffset) => gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, asArray(Uint8Array, srcData), srcOffset),
        compressedTexSubImage2D__2: (gl, target, level, xoffset, yoffset, width, height, format, srcData, srcOffset, srcLengthOverride) => gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, asArray(Uint8Array, srcData), srcOffset, srcLengthOverride),
        uniform1fv__0: (gl, location, data, srcOffset) => gl.uniform1fv(location, asArray(Float32Array, data), srcOffset),
        uniform1fv__1: (gl, location, data, srcOffset, srcLength) => gl.uniform1fv(location, asArray(Float32Array, data), srcOffset, srcLength),
        uniform2fv__0: (gl, location, data, srcOffset) => gl.uniform2fv(location, asArray(Float32Array, data), srcOffset),
        uniform2fv__1: (gl, location, data, srcOffset, srcLength) => gl.uniform2fv(location, asArray(Float32Array, data), srcOffset, srcLength),
        uniform3fv__0: (gl, location, data, srcOffset) => gl.uniform3fv(location, asArray(Float32Array, data), srcOffset),
        uniform3fv__1: (gl, location, data, srcOffset, srcLength) => gl.uniform3fv(location, asArray(Float32Array, data), srcOffset, srcLength),
        uniform4fv__0: (gl, location, data, srcOffset) => gl.uniform4fv(location, asArray(Float32Array, data), srcOffset),
        uniform4fv__1: (gl, location, data, srcOffset, srcLength) => gl.uniform4fv(location, asArray(Float32Array, data), srcOffset, srcLength),
        uniform1iv__0: (gl, location, data, srcOffset) => gl.uniform1iv(location, asArray(Int32Array, data), srcOffset),
        uniform1iv__1: (gl, location, data, srcOffset, srcLength) => gl.uniform1iv(location, asArray(Int32Array, data), srcOffset, srcLength),
        uniform2iv__0: (gl, location, data, srcOffset) => gl.uniform2iv(location, asArray(Int32Array, data), srcOffset),
        uniform2iv__1: (gl, location, data, srcOffset, srcLength) => gl.uniform2iv(location, asArray(Int32Array, data), srcOffset, srcLength),
        uniform3iv__0: (gl, location, data, srcOffset) => gl.uniform3iv(location, asArray(Int32Array, data), srcOffset),
        uniform3iv__1: (gl, location, data, srcOffset, srcLength) => gl.uniform3iv(location, asArray(Int32Array, data), srcOffset, srcLength),
        uniform4iv__0: (gl, location, data, srcOffset) => gl.uniform4iv(location, asArray(Int32Array, data), srcOffset),
        uniform4iv__1: (gl, location, data, srcOffset, srcLength) => gl.uniform4iv(location, asArray(Int32Array, data), srcOffset, srcLength),
        uniformMatrix2fv__0: (gl, location, transpose, data, srcOffset) => gl.uniformMatrix2fv(location, transpose, asArray(Float32Array, data), srcOffset),
        uniformMatrix2fv__1: (gl, location, transpose, data, srcOffset, srcLength) => gl.uniformMatrix2fv(location, transpose, asArray(Float32Array, data), srcOffset, srcLength),
        uniformMatrix3fv__0: (gl, location, transpose, data, srcOffset) => gl.uniformMatrix3fv(location, transpose, asArray(Float32Array, data), srcOffset),
        uniformMatrix3fv__1: (gl, location, transpose, data, srcOffset, srcLength) => gl.uniformMatrix3fv(location, transpose, asArray(Float32Array, data), srcOffset, srcLength),
        uniformMatrix4fv__0: (gl, location, transpose, data, srcOffset) => gl.uniformMatrix4fv(location, transpose, asArray(Float32Array, data), srcOffset),
        uniformMatrix4fv__1: (gl, location, transpose, data, srcOffset, srcLength) => gl.uniformMatrix4fv(location, transpose, asArray(Float32Array, data), srcOffset, srcLength),
        readPixels__0: (gl, x, y, width, height, format, type, offset) => gl.readPixels(x, y, width, height, format, type, offset),
        readPixels__1: (gl, x, y, width, height, format, type, dstData, dstOffset) => gl.readPixels(x, y, width, height, format, type, asArray(Uint8Array, dstData), dstOffset),
        readPixels__2: (gl, x, y, width, height, format, type, dstData, dstOffset) => gl.readPixels(x, y, width, height, format, type, asArray(Uint16Array, dstData), dstOffset),
        readPixels__3: (gl, x, y, width, height, format, type, dstData, dstOffset) => gl.readPixels(x, y, width, height, format, type, asArray(Float32Array, dstData), dstOffset)
    });
}
